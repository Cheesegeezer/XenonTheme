<Mcml xmlns="http://schemas.microsoft.com/2006/mcml"
	  xmlns:cor="assembly://MSCorLib/System"
	  xmlns:a="assembly://MediaBrowser/MediaBrowser"
	  xmlns:lib="assembly://MediaBrowser/MediaBrowser.Library"	 
	  xmlns:i="resx://MediaBrowser/MediaBrowser.Resources/Images"
      xmlns:s="file://Styles_DoNotEdit.mcml"
	    xmlns:f="file://Fonts_DoNotEdit.mcml"
      xmlns:xs="file://Xenon_Styles.mcml"
    xmlns:ib="resx://Xenon/Xenon.Resources/ItemButton"
    xmlns:sounds="resx://MediaBrowser/MediaBrowser.Resources/Sounds"
    xmlns:anim="resx://Xenon/Xenon.Resources/Animations"
    xmlns:xh="assembly://Xenon/Xenon"
    xmlns:me="Me">

  <UI Name="CoverflowScroller">
    <Properties>
      <a:Application Name="Application" Application="$Required"/>
      <lib:FolderModel Name="Folder" FolderModel="$Required"/>
      <xh:XenonHelper Name="ThemeHelper" XenonHelper="$Required"></xh:XenonHelper>
    </Properties>

    <Locals>
      <ScrollingHandler HandleDirectionalKeys="true" HandleHomeEndKeys="true" HandleMouseWheel="true" HandlePageCommands="true" HandlePageKeys="true" HandlerStage="Bubbled" Name="ScrollingHandler"/>
      <ScrollingData Name="SD" LockedAlignment="0.5" LockedPosition="0.5" />
      <IntRangedValue Name="SelectRepeaterIndex"/>

      <!--ScaleLayout Name="MyLayout" AllowScaleUp="true" /-->
      <FlowLayout Name="RepeaterLayout" Orientation="Horizontal" Repeat="WhenTooBig" />
      <IntRangedValue Name="NavCount" Value="0" />
      
      <ShortcutHandler Name="JumpForward" Shortcut="SkipForward" HandlerStage="Bubbled" Handle="true" />
      <ShortcutHandler Name="JumpBack" Shortcut="SkipBack" HandlerStage="Bubbled" Handle="true"/>
      
      <cor:Int32 Name="NormalKeyRepeat" Int32="20"/>
      <!-- This must be less than anim delay -->
      <cor:Int32 Name="FastKeyRepeat" Int32="10"/>
      <cor:Int32 Name="AnimDelay" Int32="30" />
      <!-- This must be greater than NormalKeyRepeat-->
      <cor:Int32 Name="SpeedUpDelay" Int32="2"/>
    </Locals>

    <Rules>
      <Rule>
        <Conditions>
          <Modified Source="[JumpForward.Invoked]"/>
        </Conditions>
        <Actions>
          <Invoke Target="[SD.PageDown]"/>
        </Actions>
      </Rule>

      <Rule>
        <Conditions>
          <Modified Source="[JumpBack.Invoked]"/>
        </Conditions>
        <Actions>
          <Invoke Target="[SD.PageUp]"/>
        </Actions>
      </Rule>
      
      <Changed Source="[Folder.JILShift]">
        <Actions>
          <Invoke Target="[SD.Scroll]"  amount="[Folder.JILShift]"/>
        </Actions>
      </Changed>

      <Changed Source="[Application]" InitialEvaluate="true">
        <Actions>
          <Invoke Target="[Application.FixRepeatRate]" scroller="[Scroller]" val="[NormalKeyRepeat]" />
        </Actions>
      </Changed>

      <Changed Source="[NavCount.Value]">
        <Conditions>
          <Equality Source="[NavCount.Value]" ConditionOp="Equals" Value="[SpeedUpDelay]"/>
        </Conditions>
        <Actions>
          <Invoke Target="[Application.FixRepeatRate]" scroller="[Scroller]" val="[FastKeyRepeat]" />
        </Actions>
      </Changed>

      <Changed Source="[NavCount.Value]">
        <Conditions>
          <Equality Source="[NavCount.Value]" ConditionOp="Equals" Value="0"/>
        </Conditions>
        <Actions>
          <Invoke Target="[Application.FixRepeatRate]" scroller="[Scroller]" val="[NormalKeyRepeat]" />
        </Actions>
      </Changed>

      <Default Target="[ScrollingHandler.ScrollingData]" Value="[SD]"/>
      <Default Target="[SD.Repeater]" Value="[CoverRepeater]"/>
      <Binding Source="[RepeaterLayout]" Target="[CoverRepeater.Layout]"/>

      <!-- Update cover repeater on items change. -->
      <Changed Source="[Folder.Children]">
        <Actions>
          <Set Target="[CoverRepeater.Source]" Value="[Folder.Children]" />
          <Set  Target="[Folder.SelectedChildIndex]" Value="-1"/>
        </Actions>
      </Changed>
      
      <Rule ConditionLogicalOp="And">
        <Conditions>
          <Modified Source="[Application]" InitialEvaluate="true"/>
          <Equality Source="[Application.NavigatingForward]" Value="true"/>
          <Equality Source="[Folder.Children.Count]" ConditionOp="GreaterThan" Value="0" />
        </Conditions>
        <Actions>
          <Invoke Target="[CoverRepeater.NavigateIntoIndex]"  index="[Folder.FirstUnwatchedIndex]"/>
        </Actions>
      </Rule>
    </Rules>

    <Content>
      <!-- Coverflow Scroller -->
      <Scroller Orientation="Horizontal" Name="Scroller" Navigation="RememberFocus,ContainHorizontal" ScrollingData="[SD]" FadeSize="35" >
        <LayoutInput>
          <FormLayoutInput Top="Parent,0.5" Horizontal="Fill"/>
        </LayoutInput>   
        <Children>
              <Repeater Name="CoverRepeater" Source="[Folder.Children]" Layout="[RepeaterLayout]" DiscardOffscreenVisuals="false">
                <Animations>
                  <Animation Type="Move">
                    <Keyframes>
                      <PositionKeyframe Time="0" RelativeTo="Current" Interpolation="EaseIn, 1.0, 0.25"/>
                      <PositionKeyframe Time="0.65" RelativeTo="Final"/>
                    </Keyframes>
                  </Animation>
                </Animations>
                <Content>
                  <me:CoverflowItem
                        Application="[Application]"
                        ParentItem="[Folder]"
                        ItemIndex="[RepeatedItemIndex]"
                        Item="[RepeatedItem!lib:Item]"
                        SelectRepeaterIndex="[SelectRepeaterIndex]"
                        ImageSize="[Folder.ActualThumbSize]"
                        AnimDelay="[AnimDelay]" NavCount="[NavCount]"
                        UnwatchedCountFont="font://xs:UnwatchedCountFont"
                        ShowLabels="[Folder.DisplayPrefs.ShowLabels]"
                        TopLabelFont="font://xs:CV_PosterTopLabelFont"
                        ThemeHelper="[ThemeHelper]"/>
                </Content>
              </Repeater>
            </Children>
          </Scroller>
    </Content>
  </UI>

  <UI Name="CoverflowItem" BaseUI="ib:ItemButton">
    <Properties>
      <lib:SizeRef Name="ImageSize" SizeRef="$Required"/>
      <Image Name="FocusImage" Image="image://i:ZoomPane"/>
      <Image Name="FolderImage" Image="image://i:Folder"/>
      <Image Name="BlankImage" Image="null"/>
      <BooleanChoice Name="ShowLabels" BooleanChoice="$Required" />
      <Image Name="Image" />
      <cor:Int32 Name="AnimDelay" Int32="1000" />
      <lib:FolderModel Name="ParentItem" FolderModel="$Required"/>
      <Index Name="ItemIndex" Index="$Required"/>
      <Rotation Name="RRotate" Rotation="-50deg;0,1,0"/>
      <Rotation Name="LRotate" Rotation="50deg;0,1,0"/>
      <IntRangedValue Name="SelectRepeaterIndex" IntRangedValue="$Required"/>
      <IntRangedValue Name="NavCount" IntRangedValue="$Required" />
      <Font Name="UnwatchedCountFont" Font="$Required"/>
      <Font Name="TopLabelFont" Font="$Required"/>
    </Properties>

    <Locals>
      <Timer Name="AnimTimer" Interval="[AnimDelay]" Enabled="false" AutoRepeat="false"/>
      <BooleanChoice Name="InFocus" Value="false" />
      <Rotation Name="DefaultRotation" Rotation="0deg;0,0,0" />
      <Command Name="ApplyRotation" />
    </Locals>

    <Rules>

      <!-- Set the UI to be mouse and keyboard interactive. -->
      <Default Target="[Input.KeyInteractive]" Value="true"/>
      <Default Target="[Input.MakeTopmostOnFocus]" Value="true"/>
      <Default Target="[Label.Visible]" Value="true">
        <Conditions>
          <Equality Source="[Item.HasPreferredImage]" ConditionOp="Equals" Value="false" />
          <!--<Equality Source="[ShowLabels.Value]" ConditionOp="Equals" Value="false" />-->
        </Conditions>
      </Default>


      <Binding Source="[Item.PreferredImageSmall]" Target="[MainArt.Content]" />
      <Binding Source="[Item.PreferredImageSmall]" Target="[MirrorArt.Content]" />
      <Binding Source="[ImageSize.Value]" Target="[Item.PreferredImageSmallSize]" />

      <Binding Source="[ImageSize.Value]" Target="[IndicatorPanel.MaximumSize]" />
      <Binding Source="[ImageSize.Value]" Target="[IndicatorPanel.MinimumSize]" />
      <Binding Source="[ImageSize.Value]" Target="[MirrorContstraintPanel.MaximumSize]" />
      <Binding Source="[ImageSize.Value]" Target="[MirrorContstraintPanel.MinimumSize]" />
      <Binding Source="[ImageSize.Value]" Target="[BelowLabelPanel.MaximumSize]" />
      <Binding Source="[ParentItem.DisplayPrefs.UseBanner.Value]" Target="[Item.PreferBanner]" />

      <!-- Selected state, true if item last had focus -->
      <Condition Source="[ParentItem.SelectedChildIndex]" ConditionOp="Equals" SourceValue="[ItemIndex.SourceValue]">
        <Actions>
          <Set Target="[IndicatorPanel.ColorFilter]" Value="White" />
          <Set Target="[IndicatorPanel.Alpha]" Value="1" />
        </Actions>
      </Condition>

      <Condition Source="[ParentItem.SelectedChildIndex]" ConditionOp="NotEquals" SourceValue="[ItemIndex.SourceValue]">
        <Actions>
          <Invoke Target="[AnimTimer.Stop]" />
          <Set Target="[NavCount.Value]" Value="[NavCount.Value]" ExclusiveApply="false">
            <Transformer>
              <MathTransformer Add="1"/>
            </Transformer>
          </Set>
        </Actions>
      </Condition>
      
      <Changed Source="[Input.KeyFocus]" >
        <Conditions>
          <Equality Source="[Input.KeyFocus]" Value="true" />
        </Conditions>
        <Actions>
          <Set Target="[Mirror.Visible]" Value="true"/>
          <Invoke Target="[Main.AttachAnimation]" animation="animation://anim:CVFocusGained" />
          <Set Target="[ParentItem.SelectedChildIndex]" Value="[ItemIndex.SourceValue]"/>
          <Set Target="[SelectRepeaterIndex.Value]" Value="[ItemIndex.Value]"/>
          <Invoke Target="[AnimTimer.Start]" />
          <Set Target="[Application.CurrentItem]" Value="[Item]" />
        </Actions>
      </Changed>

      <Changed Source="[AnimTimer.Tick]">
        <Actions>
          <Set Target="[InFocus.Value]" Value="true"/>
          <Set Target="[NavCount.Value]" Value="0" ExclusiveApply="false"/>
          <Set Target="[MainArt.Content]" Value="[Item.PreferredImage]" />
        </Actions>
      </Changed>

      <Condition Source="[Input.KeyFocus]" ConditionOp="Equals" SourceValue="false">
        <Actions>
          <Set Target="[MainArt.Content]" Value="[Item.PreferredImage]" />
          <Set Target="[Mirror.Visible]" Value="false"/>
          <Invoke Target="[Main.AttachAnimation]" animation="animation://anim:CVFocusLost" />
        </Actions>
      </Condition>
      
      <Condition Source="[Application.Config.DimUnselectedPosters]" ConditionOp="Equals" SourceValue="false" Target="[IndicatorPanel.ColorFilter]" Value="White" />
      <Condition Source="[Application.Config.DimUnselectedPosters]" ConditionOp="Equals" SourceValue="false" Target="[IndicatorPanel.Alpha]" Value="1" />

      <!-- Set proper rotation. -->
      <Changed Source="[ParentItem.SelectedChildIndex]" ConditionLogicalOp="And">
        <Conditions>
          <Equality Source="[ParentItem.SelectedChildIndex]" ConditionOp="Equals" Value="[ItemIndex.SourceValue]" />
        </Conditions>
        <Actions>
          <Set Target="[DefaultRotation]" Value="0deg;0,1,0" />
          <Set Target="[Main.Rotation]" Value="0deg;0,1,0" />
        </Actions>
      </Changed>
      <Condition Source="[SelectRepeaterIndex.Value]" ConditionOp="LessThan" SourceValue="[ItemIndex.Value]" Target="[Main.Rotation]" Value="[LRotate]" />
      <Condition Source="[SelectRepeaterIndex.Value]" ConditionOp="GreaterThan" SourceValue="[ItemIndex.Value]" Target="[Main.Rotation]" Value="[RRotate]" />

      <Binding Source="[Item.IsHD]" Target="[HDIndicator.Visible]" />
      <Condition Source="[Item.HDType]" ConditionOp="Equals" SourceValue="720" Target="[HDImage.Content]" Value="image://i:HDLogo720" />
      <Condition Source="[Item.HDType]" ConditionOp="Equals" SourceValue="1080" Target="[HDImage.Content]" Value="image://i:HDLogo1080" />

      <Binding Source="[Item.HaveWatched]" Target="[TickPanel.Visible]" />
      <Binding Source="[Item.UnwatchedCountString]" Target="[UnwatchedCount.Content]" />
      <Binding Source="[Item.ShowUnwatched]" Target="[UnwatchedIndicator.Visible]" />

      <Changed Source="[Application.Config.ShowWatchedTickOnFolders]" InitialEvaluate="true">
        <Conditions>
          <Equality Source="[Item.IsPlayable]" Value="false" />
        </Conditions>
        <Actions>
          <Set Target="[TickIndicatorPanel.Visible]" Value="[Application.Config.ShowWatchedTickOnFolders]" />
        </Actions>
      </Changed>

      <Changed Source="[Application.Config.ShowWatchTickInPosterView]" InitialEvaluate="true">
        <Conditions>
          <Equality Source="[Item.IsPlayable]" Value="true" />
        </Conditions>
        <Actions>
          <Set Target="[TickIndicatorPanel.Visible]" Value="[Application.Config.ShowWatchTickInPosterView]" />
        </Actions>
      </Changed>

      <Changed Source="[Item.ShowUnwatched]">
        <Actions>
          <Set Target="[UnwatchedCount.Content]" Value="[Item.UnwatchedCountString]" />
        </Actions>
      </Changed>

      <Binding Target="[MainArt.MaintainAspectRatio]" Source="[Item.SmallImageIsDistorted]">
        <Transformer>
          <BooleanTransformer Inverse="true"/>
        </Transformer>
      </Binding>

      <Binding Source="[ShowLabels.Value]" Target="[BelowLabelPanel.Visible]" />
      <Binding Source="[Item.Name]" Target="[BelowLabelPanel.Content]" />
      <Binding Target="[Mirror.NearOffset]" Source="[ImageSize.Value.Height]">
        <Transformer>
          <MathTransformer DivideInt="2"/>
        </Transformer>
      </Binding>
      <Binding Target="[Mirror.FadeSize]" Source="[ImageSize.Value.Height]">
        <Transformer>
          <MathTransformer DivideInt="4"/>
        </Transformer>
      </Binding>
      <Binding Target="[Main.Margins.Bottom]" Source="[ImageSize.Value.Height]">
        <Transformer>
          <MathTransformer DivideInt="-2"/>
        </Transformer>
      </Binding>
      <Condition Source="[Item.ParentalAllowed]" ConditionOp="Equals" SourceValue="false" Target="[PCLock.Visible]" Value="true" />
    </Rules>

    <Content>
      <Graphic Name="Main" Content="[BlankImage]" CenterPointPercent="0.5,0.5,0.5" Margins="-35,0,-35,0" > 
        <!--Rotation="40deg;0.13,1,0"-->
        <Layout>
          <AnchorLayout SizeToVerticalChildren="true"/>
        </Layout>
        <Children>
          <!-- Focus Outline-->
          <Graphic Name="FocusBg" Content="[BlankImage]" Padding="5,5,5,5" SizingPolicy="SizeToChildren" Layout="VerticalFlow" >
            <Children>
              <Panel Name="IndicatorPanel" CenterPointPercent="0.5,0.5,0.5" Padding="0,0,0,0" MaximumSize="[ImageSize.Value]" MinimumSize="[ImageSize.Value]" ColorFilter="150,150,150" >
                <Layout>
                  <AnchorLayout SizeToHorizontalChildren="false" SizeToVerticalChildren="false"/>
                </Layout>
                <Children>
                  <Panel  Scale="1,1,1" Padding="0,0,0,0" Layout="Center" Alpha="0.8" Name="TickIndicatorPanel" Visible="[Item.HaveWatched]" MaximumSize="32,32"  >
                    <LayoutInput>
                      <AnchorLayoutInput Horizontal="Near" Vertical="Near" />
                    </LayoutInput>
                    <Children>
                      <Panel Name="TickPanel" Layout="Center">
                        <Children>
                          <Graphic Content="image://i:TickPoster"  MaximumSize="30,30"  />
                          <Graphic Content="image://i:TickPosterBase" ColorFilter="color://xs:XC_WatchedBG" MaximumSize="30,30" Visible="global://s:ShowWatchedMarkerBackgrounds"  />
                        </Children>
                      </Panel>
                    </Children>
                  </Panel>
                  
                  <Panel  Margins="2,2,0,0" Scale="1,1,1" Padding="0,0,0,0" Layout="Center" Name="UnwatchedIndicator" MaximumSize="47,47" >
                    <!--Rotation="15deg;0,0,1"-->
                    <LayoutInput>
                      <AnchorLayoutInput Horizontal="Near" Vertical="Near"/>
                    </LayoutInput>
                    <Children>
                      <Text Name="UnwatchedCount" Content="" Color="color://s:FontColorLight" Font="[UnwatchedCountFont]" Margins="0,0,-3,-10"></Text>
                      <Graphic Visible="global://s:ShowWatchedMarkerBackgrounds" Content="image://i:Unwatched"  MinimumSize="45,45" MaximumSize="45,45" MaintainAspectRatio="true" Layout="Center" ></Graphic>
                      <Graphic Visible="true" ColorFilter="color://s:FilterColor" Content="image://i:UnwatchedBase" MinimumSize="45,45" MaximumSize="45,45"  MaintainAspectRatio="true" Layout="Center" ></Graphic>
                    </Children>
                  </Panel>
                  
                  <Panel  Scale="1,1,1" Padding="0,0,0,0" Layout="Anchor" Visible="false" Name="HDIndicator" >
                    <LayoutInput>
                      <AnchorLayoutInput Horizontal="Far" Vertical="Far"/>
                    </LayoutInput>
                    <Children>
                      <Graphic Name="HDImage" Content="image://i:HDLogo" Margins="0,0,5,5" MaximumSize="48,35" MaintainAspectRatio="true">
                        <LayoutInput>
                          <AnchorLayoutInput Horizontal="Near" Vertical="Near"/>
                        </LayoutInput>
                      </Graphic>
                    </Children>
                  </Panel>
                  
                  <Panel  Scale="1,1,1" Padding="0,0,0,0" Layout="Anchor" Visible="false" Name="PCLock" >
                    <LayoutInput>
                      <AnchorLayoutInput Horizontal="Near" Vertical="Far"/>
                    </LayoutInput>
                    <Children>
                      <Graphic Name="PCLockImage" Content="image://i:Lock" Margins="0,0,5,5" MaximumSize="30,30" MaintainAspectRatio="true">
                        <LayoutInput>
                          <AnchorLayoutInput Horizontal="Near" Vertical="Near"/>
                        </LayoutInput>
                      </Graphic>
                    </Children>
                  </Panel>
                  
                  <Graphic Name="MainArt" SizingPolicy="SizeToConstraint" MaintainAspectRatio="true" Content="[Item.PreferredImage]"  >
                    <!--Rotation="70deg;0,1,0"-->
                    <Children>
                      <Panel  Scale="1,1,1" Padding="0,0,0,0" Layout="Center">
                        <LayoutInput>
                          <AnchorLayoutInput Horizontal="Fill" Vertical="Fill"/>
                        </LayoutInput>
                        <Children>
                          <Text Alpha="1" Name="Label" Visible="false" Color="color://s:FontColorLight" Content="[Item.Name]"  WordWrap="true" Margins="5,5,5,5"  HorizontalAlignment="Center">
                          </Text>
                        </Children>
                      </Panel>
                    </Children>
                  </Graphic>
                </Children>
              </Panel>

              <Text Name="BelowLabelPanel" Margins="0,5,0,-3" Alpha="1" Color="color://s:FontColorLight"  Font="[TopLabelFont]" Content="[Item.Name]" WordWrap="false" HorizontalAlignment="Near"></Text>
            </Children>
          </Graphic>

          <!-- Mirror Effect-->
          <Clip Name="Mirror" FadeAmount="1" FadeSize="50" NearOffset="0" Padding="5,5,5,5" Orientation="Vertical" ShowFar="false" Margins="0,-10,0,0" Rotation="15deg;0,1,0">
            <Layout>
              <FlowLayout Orientation="Vertical" ItemAlignment="Center" />
            </Layout>
            <LayoutInput>
              <AnchorLayoutInput Top="FocusBg, 1, -5" />
            </LayoutInput>
            <Children>
              <Panel Name="MirrorContstraintPanel" ColorFilter="color://s:MirrorFilter" Alpha="global://s:MirrorAlpha" CenterPointPercent="0.5,0.5,0.5" Rotation="180deg;1,0,0">
                <Layout>
                  <AnchorLayout SizeToHorizontalChildren="false" SizeToVerticalChildren="false"/>
                </Layout>
                <Children>
                  <Graphic Name="MirrorArt" SizingPolicy="SizeToConstraint" MaintainAspectRatio="true" >
                  </Graphic>
                </Children>
              </Panel>
            </Children>
          </Clip>
        </Children>

        <!--Animations>
          <Animation Type="Scale" CenterPointPercent="0.5,0.5,0.5">
            <Keyframes>
              <ScaleKeyframe Time="0" RelativeTo="Current" Interpolation="Log"/>
              <ScaleKeyframe Time="0.35" RelativeTo="Final"/>
            </Keyframes>
          </Animation>
        </Animations-->
      </Graphic>


    </Content>
  </UI>


</Mcml>
